/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 19 "csdk.go"

#include <stdlib.h>

typedef struct optimizely_user_attribute {
    char *name;
    int var_type; // 1 = string, 2 = bool, 3 = float, 4 = int
    void *data;
} optimzely_user_attribute;

typedef struct optimizely_user_attributes{
    char *id;
    int num_attributes;
    struct optimizely_user_attribute *user_attribute_list;
} optimizely_user_attributes;

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


extern void optimizely_sdk_init();

extern GoInt32 optimizely_sdk_client(char* p0);

extern void optimizely_sdk_delete_client(GoInt32 p0);

extern GoInt32 optimizely_sdk_is_feature_enabled(GoInt32 p0, char* p1, optimizely_user_attributes* p2, char** p3);

extern char* optimizely_sdk_get_feature_variable_string(GoInt32 p0, char* p1, char* p2, optimizely_user_attributes* p3, char** p4);

extern GoUint8 optimizely_sdk_get_feature_variable_boolean(GoInt32 p0, char* p1, char* p2, optimizely_user_attributes* p3, char** p4);

extern GoFloat64 optimizely_sdk_get_feature_variable_double(GoInt32 p0, char* p1, char* p2, optimizely_user_attributes* p3, char** p4);

extern GoInt optimizely_sdk_get_feature_variable_integer(GoInt32 p0, char* p1, char* p2, optimizely_user_attributes* p3, char** p4);

extern char* optimizely_sdk_get_variation(GoInt32 p0, char* p1, optimizely_user_attributes* p2, char** p3);

extern char* optimizely_sdk_get_feature_variable(GoInt32 p0, char* p1, char* p2, optimizely_user_attributes* p3, char** p4, char** p5);

extern char* optimizely_sdk_activate(GoInt32 p0, char* p1, optimizely_user_attributes* p2, char** p3);

extern char** optimizely_sdk_get_enabled_features(GoInt32 p0, optimizely_user_attributes* p1, int* p2, char** p3);

// this only returns the names, not the values

extern char** optimizely_sdk_get_all_feature_variables(GoInt32 p0, char* p1, optimizely_user_attributes* p2, int* p3, int* p4, char** p5);

extern char* optimizely_sdk_track(GoInt32 p0, char* p1, optimizely_user_attributes* p2, float* p3, char** p4);

#ifdef __cplusplus
}
#endif
